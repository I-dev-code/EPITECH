!<arch>
//                                              388       `
my_compute_factorial_it.o/
my_compute_factorial_rec.o/
my_compute_power_it.o/
my_compute_power_rec.o/
my_compute_square_root.o/
my_find_prime_sup.o/
my_print_alpha.o/
my_print_comb2.o/
my_print_digits.o/
my_print_revalpha.o/
my_show_word_array.o/
my_sort_int_array.o/
my_strcapitalize.o/
my_str_isalpha.o/
my_str_islower.o/
my_str_isprintable.o/
my_str_isupper.o/
my_str_to_word_array.o/
/0              1592532750  1000  1000  100644  488       `
!<arch>
//                                              28        `
my_compute_factorial_it.c/

/0              1592528700  1000  1000  100644  332       `
/*
** EPITECH PROJECT, 2018
** my_compute_factorial_it.c
** File description:
** my_compute_factorial_it
*/

int my_compute_factorial_it(int nb)
{
    int a = nb - 1;

    if (nb == 0)
        return (1);
    if (nb < 0 || nb >= 13)
        return (0);
    while (a > 1) {
        nb = nb * a;
        a--;
    }
    return (nb);
}
/27             1592532750  1000  1000  100644  478       `
!<arch>
//                                              28        `
my_compute_factorial_rec.c/
/0              1592528700  1000  1000  100644  322       `
/*
** EPITECH PROJECT, 2018
** my_compute_factorial_rec.c
** File description:
** factorial in recursiv
*/

int my_compute_factorial_rec(int nb)
{
    int a;

    if (nb == 0)
        return (1);
    if (nb < 0 || nb >= 13)
        return (0);
    else
        a = nb * my_compute_factorial_rec(nb - 1);
    return (a);
}
/55             1592532750  1000  1000  100644  462       `
!<arch>
//                                              24        `
my_compute_power_it.c/

/0              1592528700  1000  1000  100644  310       `
/*
** EPITECH PROJECT, 2018
** my_compute_power_it.c
** File description:
** calcul a power
*/

int my_compute_power_it(int nb, int p)
{
    int res = nb;

    if (p == 0)
        return (1);
    if (p < 0)
        return (0);
    while (p > 1) {
        res = res * nb;
        p--;
    }
    return (res);
}
/78             1592532750  1000  1000  100644  466       `
!<arch>
//                                              24        `
my_compute_power_rec.c/
/0              1592532267  1000  1000  100644  313       `
/*
** EPITECH PROJECT, 2018
** my_compute_power_rec.c
** File description:
** calc power in recursiv
*/

int my_compute_power_rec(int nb, int p)
{
    int res;

    if (p == 0)
        return (1);
    if (p < 0)
        return (0);
    else
        res = nb * my_compute_power_rec(nb, p - 1);
    return (res);
}

/102            1592532751  1000  1000  100644  466       `
!<arch>
//                                              26        `
my_compute_square_root.c/
/0              1592528700  1000  1000  100644  312       `
/*
** EPITECH PROJECT, 2018
** my_compute_square_root.c
** File description:
** compute_square_root 
*/

int my_compute_square_root(int nb)
{
    int a = 0;

    if (nb < 0 || nb == 0)
        return (0);
    while (a * a != nb) {
        a++;
        if (a > nb)
            return (0);
    }
    return (a);
}
my_evil_str.o/  1592532751  1000  1000  100644  416       `
!<arch>
my_evil_str.c/  1592531735  1000  1000  100644  348       `
/*
** EPITECH PROJECT, 2018
** my_evil_str.c
** File description:
** reverse a string
*/

#include "../../include/my.h"

char *my_evil_str(char *str)
{
    int a = 0;
    int b = my_strlen(str) - 1;
    char c;

    while(a < b) {
        c = str[a];
        str[a] = str[b];
        str[b] = c;
        a++;
        b--;
    }
    return(str);
}

/128            1592532751  1000  1000  100644  298       `
!<arch>
//                                              22        `
my_find_prime_sup.c/

/0              1592528700  1000  1000  100644  147       `
/*
** EPITECH PROJECT, 2018
** my_find_prime_sup.c
** File description:
** my_find_prime_sup
*/

int my_find_prime_sup(int nb)
{
    return (0);
}

my_getnbr.o/    1592532751  1000  1000  100644  632       `
!<arch>
my_getnbr.c/    1592532267  1000  1000  100644  563       `
/*
** EPITECH PROJECT, 2018
** my_getnbr.c
** File description:
** find good nb in a str
*/

int my_getnbr(char const *str)
{
    int sign = 1;
    int a = 0;
    int b = 0;
    int nb = 0;
    
    while(str[a] == '-' || str[a] == '+') {
        if(str[a] == '-')
            sign = -1;
        if(str[a] == '+')
            sign = 1;
        a++;
    }
    while(str[a] != '\0' && str[a] >= '0' && str[a] <= '9') {
        if(b > 10)
            return (0);
        nb = nb * 10 + str[a++] - 48;
        b++;
    }
    if(b <= 10)
        return (nb * sign);
}

my_isneg.o/     1592532751  1000  1000  100644  318       `
!<arch>
my_isneg.c/     1592531774  1000  1000  100644  250       `
/*
** EPITECH PROJECT, 2018
** my_isneg.c
** File description:
** print P if integer positiv else N
*/

#include "../../include/my.h"

int my_isneg(int n)
{
    if (n >= 0)
        my_putchar('P');
    else
        my_putchar('N');
    return (0);
}
my_is_prime.o/  1592532751  1000  1000  100644  198       `
!<arch>
my_is_prime.c/  1592528700  1000  1000  100644  129       `
/*
** EPITECH PROJECT, 2018
** my_is_prime.c
** File description:
** my_is_prime
*/

int my_is_prime(int nb)
{
    return (0);
}

/149            1592532751  1000  1000  100644  396       `
!<arch>
//                                              18        `
my_print_alpha.c/
/0              1592531787  1000  1000  100644  250       `
/*
** EPITECH PROJECT, 2018
** my_print_alpha.c
** File description:
** print alphabet
*/

#include "../../include/my.h"

int my_print_alpha(void)
{
    char a = 97;

    while (a <= 122) {
        my_putchar(a);
        a++;
    }
    return (0);
}
/167            1592532751  1000  1000  100644  824       `
!<arch>
//                                              18        `
my_print_comb2.c/
/0              1592531804  1000  1000  100644  678       `
/*
** EPITECH PROJECT, 2018
** my_print_comb2.c
** File description:
**  00 01 to 98 99
*/

#include "../../include/my.h"

static int print_comb2(int a, int b)
{
    int c = (a / 10);
    int d = (a % 10);
    int e = (b / 10);
    int f = (b % 10);

    my_putchar(c + 48);
    my_putchar(d + 48);
    my_putchar(' ');
    my_putchar(e + 48);
    my_putchar(f + 48);
    if(a < 98) {
        my_putchar(',');
        my_putchar(' ');
    }    
}

int my_print_comb2(void)
{
    int a = 0;
    int b = 1;

    while(a != 99) {
        while(b <= 98) {
            print_comb2(a, b);
            b++;
        }
        print_comb2(a, b);
        a++;
        b = a + 1;
    }
}

my_print_comb.o/1592532751  1000  1000  100644  888       `
!<arch>
my_print_comb.c/1592531795  1000  1000  100644  820       `
/*
** EPITECH PROJECT, 2018
** my_print_comb.c
** File description:
** print digit 012 to 789
*/

#include "../../include/my.h"

static void print_comb(char a, char b, char c)
{
    my_putchar(c);
    my_putchar(b);
    my_putchar(a);
}

static void print_indent(void)
{
    my_putchar(',');
    my_putchar(' ');
}

int my_print_comb(void)
{
    char a = '2';
    char b = '1';
    char c = '0';

    while (c < '7') {
        print_comb(a,b,c);
        print_indent();
        a++;
        if (a == '9') {
            print_comb(a,b,c);
            print_indent();
            ++b;
            a = b + 1;
        }
        if (b == '8') {
            print_comb(a,b,c);
            print_indent();
            ++c;
            b = c + 1;
            a = b + 1;
        }
    }
    print_comb(a,b,c);
    return (0);
}

/185            1592532751  1000  1000  100644  410       `
!<arch>
//                                              20        `
my_print_digits.c/

/0              1592531812  1000  1000  100644  261       `
/*
** EPITECH PROJECT, 2018
** my_print_digits.c
** File description:
** print all digit in order
*/

#include "../../include/my.h"

int my_print_digits(void)
{
    char a = 48;

    while (a <= 57) {
        my_putchar(a);
        a++;
    }
    return (0);
}

/204            1592532751  1000  1000  100644  414       `
!<arch>
//                                              22        `
my_print_revalpha.c/

/0              1592531820  1000  1000  100644  263       `
/*
** EPITECH PROJECT, 2018
** my_print_revalpha.c
** File description:
** print alphabet revers
*/

#include "../../include/my.h"

int my_print_revalpha(void)
{
    char a = 122;

    while (a >= 97) {
        my_putchar(a);
        a--;
    }
    return (0);
}

my_putchar.o/   1592532751  1000  1000  100644  232       `
!<arch>
my_putchar.c/   1592532267  1000  1000  100644  163       `
/*
** EPITECH PROJECT, 2018
** my_putchar.c
** File description:
** my_putchar
*/

#include "../../include/my.h"

void my_putchar(char c)
{
    write(1, &c, 1);
}

my_put_nbr.o/   1592532751  1000  1000  100644  448       `
!<arch>
my_put_nbr.c/   1592532267  1000  1000  100644  379       `
/*
** EPITECH PROJECT, 2018
** my_put_nbr.c
** File description:
** print numb
*/

#include "../../include/my.h"

int my_put_nbr(int nb)
{
    if (nb >= 10) {
        my_put_nbr(nb / 10);
        my_put_nbr(nb % 10);
        nb++;
    }
    else if (nb < 0) {
        my_putchar('-');
        my_put_nbr(nb * (-1));
    }
    else
        my_putchar(nb + '0');
    return (0);
}

my_putstr.o/    1592532751  1000  1000  100644  330       `
!<arch>
my_putstr.c/    1592532267  1000  1000  100644  261       `
/*
** EPITECH PROJECT, 2018
** my_putstr.c
** File description:
** print caract 1by1
*/

#include "../../include/my.h"

int my_putstr(char const *str)
{
    int a = 0;

    while(str[a] != '\0') {
        my_putchar(str[a]);
        a++;
    }
    return(0);
}

my_revstr.o/    1592532751  1000  1000  100644  416       `
!<arch>
my_revstr.c/    1592528700  1000  1000  100644  347       `
/*
** EPITECH PROJECT, 2018
** my_revstr.c
** File description:
** reverse a string
*/

char *my_revstr(char *str)
{
    int a = 0;
    int b = 0;
    char swap;

    while (str[a])
        a++;
    a--;
    while (b < a) {
        swap = str[a];
        str[a] = str[b];
        str[b] = swap;
        b++;
        a--;
    }
    return (str);
}

my_showmem.o/   1592532751  1000  1000  100644  214       `
!<arch>
my_showmem.c/   1592528700  1000  1000  100644  145       `
/*
** EPITECH PROJECT, 2018
** my_showmem.c
** File description:
** my_showmem
*/

int my_showmem(char const *str, int size)
{
    return (0);
}

my_showstr.o/   1592532751  1000  1000  100644  204       `
!<arch>
my_showstr.c/   1592528700  1000  1000  100644  135       `
/*
** EPITECH PROJECT, 2018
** my_showstr.c
** File description:
** my_showstr
*/

int my_showstr(char const *str)
{
    return (0);
}

/225            1592532751  1000  1000  100644  564       `
!<arch>
//                                              22        `
my_show_word_array.c/
/0              1592532267  1000  1000  100644  414       `
/*
** EPITECH PROJECT, 2018
** my_show_word_array.c
** File description:
** display content of an array of word
*/

#include "../../include/my.h"

int my_show_word_array(char * const *tab)
{
    int a = 0;
    int b;

    while (tab[a]) {
        b = 0;
        while(tab[a][b]) {        
            my_putchar(tab[a][b]);
            b++;
        }
        my_putchar('\n');
        a++;
    }
    return (0);
}
/247            1592532751  1000  1000  100644  308       `
!<arch>
//                                              22        `
my_sort_int_array.c/

/0              1592528700  1000  1000  100644  157       `
/*
** EPITECH PROJECT, 2018
** my_sort_int_array.c
** File description:
** sort int array
*/

void my_sort_int_array(int *tab, int size)
{
    return (0);
}

/268            1592532751  1000  1000  100644  298       `
!<arch>
//                                              20        `
my_strcapitalize.c/
/0              1592528700  1000  1000  100644  149       `
/*
** EPITECH PROJECT, 2018
** my_strcapitalize.c
** File description:
** my_strcapitalize
*/

char *my_strcapitalize(char *str)
{
    return (0);
}

my_strcat.o/    1592532751  1000  1000  100644  352       `
!<arch>
my_strcat.c/    1592528700  1000  1000  100644  283       `
/*
** EPITECH PROJECT, 2018
** my_strcat.c
** File description:
** my_strcat
*/

char my_strcat(char *dest, char const *src)
{
    int a = 0;
    int b = 0;

    while (dest[a])
	a++;
    while (src[b]) {
	dest[a] = src[b];
	a++;
	b++;
    }
    dest[a] = '\0';
    return (dest);
}

my_strcmp.o/    1592532751  1000  1000  100644  382       `
!<arch>
my_strcmp.c/    1592528700  1000  1000  100644  314       `
/*
** EPITECH PROJECT, 2018
** my_strcmp.c
** File description:
** compare 2 string
*/

int my_strcmp(char const *s1, char const *s2)
{
    int a = 0;
        
    while (s1[a] && s1[a] == s2[a])
        a++;
    if (s1[a] > s2[a])
        return (1);
    if (s1[a] < s2[a])
        return (-1);
    return (0);
}
my_strcpy.o/    1592532751  1000  1000  100644  342       `
!<arch>
my_strcpy.c/    1592528700  1000  1000  100644  274       `
/*
** EPITECH PROJECT, 2018
** my_strcpy.c
** File description:
** copy a string in another
*/

char *my_strcpy(char *dest, char const *src)
{
    int a = 0;

    while (src[a] != '\0') {
        dest[a] = src[a];
        a++;
    }
    dest[a] = '\0';
    return (dest);
}
my_strdup.o/    1592532751  1000  1000  100644  498       `
!<arch>
my_strdup.c/    1592532281  1000  1000  100644  430       `
/*
** EPITECH PROJECT, 2018
** my_strdup.c
** File description:
** my_strdup
*/

#include "../../include/my.h"

char *my_strdup(char const *src)
{
    int a = 0;
    int b = 0;
    char *dest;

    if (src == NULL)
        return (NULL);
    while (src[a])
        a++;
    dest = malloc(sizeof(dest) * a + 1);
    while (src[b]) {
        dest[b] = src[b];
        b++;
    }
    dest[b] = '\0';
    return (dest);            
}
/288            1592532751  1000  1000  100644  294       `
!<arch>
//                                              18        `
my_str_isalpha.c/
/0              1592528700  1000  1000  100644  147       `
/*
** EPITECH PROJECT, 2018
** my_str_isalpha.c
** File description:
** my_str_isalpha
*/

int my_str_isalpha(char const *str)
{
    return (0);
}

/306            1592532751  1000  1000  100644  294       `
!<arch>
//                                              18        `
my_str_islower.c/
/0              1592528700  1000  1000  100644  147       `
/*
** EPITECH PROJECT, 2018
** my_str_islower.c
** File description:
** my_str_islower
*/

int my_str_islower(char const *str)
{
    return (0);
}

my_str_isnum.o/ 1592532751  1000  1000  100644  210       `
!<arch>
my_str_isnum.c/ 1592528700  1000  1000  100644  141       `
/*
** EPITECH PROJECT, 2018
** my_str_isnum.c
** File description:
** my_str_isnum
*/

int my_str_isnum(char const *str)
{
    return (0);
}

/324            1592532751  1000  1000  100644  310       `
!<arch>
//                                              22        `
my_str_isprintable.c/
/0              1592528700  1000  1000  100644  159       `
/*
** EPITECH PROJECT, 2018
** my_str_isprintable.c
** File description:
** my_str_isprintable
*/

int my_str_isprintable(char const *str)
{
    return (0);
}

/346            1592532751  1000  1000  100644  294       `
!<arch>
//                                              18        `
my_str_isupper.c/
/0              1592528700  1000  1000  100644  147       `
/*
** EPITECH PROJECT, 2018
** my_str_isupper.c
** File description:
** my_str_isupper
*/

int my_str_isupper(char const *str)
{
    return (0);
}

my_strlen.o/    1592532751  1000  1000  100644  306       `
!<arch>
my_strlen.c/    1592532321  1000  1000  100644  238       `
/*
** EPITECH PROJECT, 2018
** my_strlen.c
** File description:
** count nb caract of string
*/

#include "../../include/my.h"

int my_strlen(char const *str)
{
    int a = 0;
    
    while(str[a] != '\0')
        a++;
    return (a);
}
my_strlowcase.o/1592532751  1000  1000  100644  344       `
!<arch>
my_strlowcase.c/1592528700  1000  1000  100644  276       `
/*
** EPITECH PROJECT, 2018
** my_strlowcase.c
** File description:
** my_strlowcase
*/

char *my_strlowcase(char *str)
{
    int a = 0;

    while (str[a]) {
        if (str[a] >= 'A' && str[a] <= 'Z')
            str[a] = str[a] + 32;
        a++;
    }
    return (str);
}
my_strncat.o/   1592532751  1000  1000  100644  406       `
!<arch>
my_strncat.c/   1592528700  1000  1000  100644  337       `
/*
** EPITECH PROJECT, 2018
** my_strncat.c
** File description:
** my_strncat
*/

char *my_strncat(char *dest, char const *src, int nb)
{
    int a = 0;
    int b = 0;
    
    while (dest[a])
        a++;
    while (b < nb && src[b]) {
        dest[a] = src[b];
        a++;
        b++;
    }
    dest[a] = '\0';
    return (dest);
}

my_strncmp.o/   1592532751  1000  1000  100644  392       `
!<arch>
my_strncmp.c/   1592528700  1000  1000  100644  323       `
/*
** EPITECH PROJECT, 2018
** my_strncmp.c
** File description:
** str n compare
*/

int my_strncmp(char const *s1, char const *s2, int n)
{
    int a = 0;

    while (s1[a] && s1[a] == s2[a] && a <= n)
        a++;
    if (s1[a] > s2[a])
        return (1);
    if (s1[a] < s2[a])
        return (-1);
    return (0);
}


my_strncpy.o/   1592532751  1000  1000  100644  398       `
!<arch>
my_strncpy.c/   1592528700  1000  1000  100644  330       `
/*
** EPITECH PROJECT, 2018
** my_strncpy.c
** File description:
** strcpy for n caract
*/

char *my_strncpy(char *dest, char const *src, int n)
{
    int a = 0;

    while (a < n && src[a] != '\0') {
        dest[a] = src[a];
        a++;
    }
    while (a < n) {
        dest[a] = '\0';
        a++;
    }
    return (dest);
}
my_strstr.o/    1592532751  1000  1000  100644  594       `
!<arch>
my_strstr.c/    1592532267  1000  1000  100644  526       `
/*
** EPITECH PROJECT, 2018
** my_strstr.c
** File description:
** as str compare
*/

#include "../../include/my.h"

char *my_strstr(char *str, char const *to_find)
{
    int a = 0;
    int b = 0;
    int c = 0;
    int d = 0;

    while (to_find[d])
        d++;
    while (str[a]) {
        if (to_find[b] == str[a]) {
            b++;
            c++;
        } else if (c != d) {
            b = 0;
            c = 0;
        }
        a++;
    }
    if (c == d)
        return (to_find);
    else
        return (0);
}


/364            1592532751  1000  1000  100644  1158      `
!<arch>
//                                              24        `
my_str_to_word_array.c/
/0              1592532267  1000  1000  100644  1006      `
/*
** EPITECH PROJECT, 2018
** my_str_to_word_array.c
** File description:
** str to word array
*/

#include "../../include/my.h"

static char **my_malloc(char const *str)
{
    int a = 0;
    int e = 0;
    char **tab;
    
    while (str[a])
        a++;
    tab = malloc(sizeof(char *) * a + 1);
    while (e <= a) {
        tab[e] = malloc(sizeof(char) * a + 1);
        e++;
    }
    return (tab);
}

char **my_str_to_word_array(char const *str)
{
    int b = 0;
    int c = 0;
    int d = 0;
    char **tab = my_malloc(str);

    while (str[d]) {
        while ((str[d] < '0' || str[d] > '9') && (str[d] < 'a' || str[d] > 'z')
               && (str[d] < 'A' || str[d] > 'Z') && str[d] != '\0')
            d++;
        while ((str[d] >= '0' && str[d] <= '9') || (str[d] >= 'a' && str[d] <= 'z')
               || (str[d] >= 'A' && str[d] <= 'Z')) {
            tab[b][c++] = str[d++];
        }
        tab[b][c] = '\0';
        c = 0;
        b++;
    }
    tab[b - 1] = NULL;
    return (tab);
}
my_strupcase.o/ 1592532751  1000  1000  100644  344       `
!<arch>
my_strupcase.c/ 1592528700  1000  1000  100644  276       `
/*
** EPITECH PROJECT, 2018
** my_strupcase.c
** File description:
** my_strupcase
*/

char *my_strupcase(char *str)
{
    int i = 0;

    while (str[i]) {
        if (str[i] >= 97 && str[i] <= 122)
            str[i] = str[i] - 32;
        i += 1;
    }
    return (str);
}

my_swap.o/      1592532751  1000  1000  100644  268       `
!<arch>
my_swap.c/      1592532267  1000  1000  100644  200       `
/*
** EPITECH PROJECT, 2018
** my_swap.c
** File description:
** swap 2 pointer
*/

#include "../../include/my.h"

int my_swap(int *a, int *b)
{
    int c;

    c = *a;
    *a = *b;
    *b = c;    
}
